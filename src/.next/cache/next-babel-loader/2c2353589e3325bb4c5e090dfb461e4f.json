{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport fetch from 'node-fetch';\nimport styles from './style.module.scss';\nimport classnames from 'classnames/bind';\nexport const propTypes = {\n  books: PropTypes.array,\n  book: PropTypes.object\n};\n\nfunction Book(props) {\n  const cx = classnames.bind(styles);\n  const {\n    books,\n    book\n  } = props;\n  const router = useRouter();\n\n  if (router.isFallback) {\n    return __jsx(\"div\", null, \"Loading...\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"p\", null, \"BOOK \"), __jsx(\"div\", null, books.map((book, index) => __jsx(\"div\", {\n    key: index\n  }, book.name))), __jsx(\"div\", {\n    className: cx('book-book')\n  }, __jsx(\"p\", null, \"Book Id: \", book.id), __jsx(\"p\", null, \"Book Name: \", book.name), __jsx(\"p\", null, \"Book Price: \", book.price), __jsx(\"p\", null, \"Book Rent Price: \", book.rent_price), __jsx(\"img\", {\n    src: \"/vercel.svg\",\n    alt: \"my image\"\n  })), __jsx(\"div\", null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"index\")), __jsx(\"br\", null), __jsx(Link, {\n    href: \"/book\"\n  }, __jsx(\"a\", null, \"Book\")), __jsx(\"br\", null), __jsx(Link, {\n    href: \"/about\"\n  }, __jsx(\"a\", null, \"About\"))));\n}\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('http://127.0.0.1:8000/api/books');\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      id: String(post.id)\n    }\n  })); // We'll pre-render only these paths at build time.\n\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const booksResponse = await fetch('http://127.0.0.1:8000/api/books');\n  const books = await booksResponse.json();\n  const bookResponse = await fetch(`http://127.0.0.1:8000/api/book/${params.id}`);\n  const book = await bookResponse.json();\n  return {\n    props: {\n      books,\n      book\n    }\n  };\n}\nexport default Book;","map":null,"metadata":{},"sourceType":"module"}